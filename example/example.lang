

var x = 100, y = 10.323, z;

const j = 100;

y * x;
z;

if (3 < 2) {
    2 + 2;
} else  {
    3 + 6;
}

func add(a, b) {
   return a + b;
}

func fact(n) {
    if (n <= 1) {
        return 1;
    }
    return n * fact(n - 1);
}

add(69, 420);

var f = fact(5);

println(f);

if (3 < 2) {
    1 + 1;
} else {
    2 + 7;
}

println(1, 2, 3, "Hello World!", z);

func pp(callback) {
    {
        {
            callback(1,2,3);
        }
        println("Nah");
    }
    println("End!");
}

var b = 0;

while (b < 100) {
    println("Hello!", ++b);
}

pp(println);

var n = 1;
do {
    
    println(">> Hello \0 World!", ++n);
    
} while (n < 23 || true)


var jj = 1;


var arr1 = [...[1, 2, 3, 4, 5]];
var arr2 = [...arr1, ...arr1, 6, 7, 8];

println(arr1);
println(">>", arr2);

var obj1 = {
    "Two"  : 2, 
    "Three": 3
};

var obj = {
    "Hello": "World",
    "One": 1,
    ...(obj1)
};

while (jj < 100000) {
    ++jj;
}

println(">>", obj["Hello"], obj["One"], arr2[0]);

println(obj, [obj1, 1, 2]);


func err(a, b, c) {
    return a + b + c;
}

var k = 0;

var result = (100 / k) catch(e) {
    println("catch:>>", e);
    return 1 << 2;
};

println("RESULT:", result);


println(err(1,2,3));
println(">>", obj["Hello"], [1,2,3][1000] catch (err) {
    println("index error:", err);
});

println(panic == panic);

println(">>", [...(0..50)], "<<");


println("Done!!!");

const gg = 200;

func accessGlobal() {
    println(gg);
}

println("Calling!!");

accessGlobal();

func ret(a, b) {
    println(a, b);
    return func() {
        return a + b + 1000;
    };

    [...(0..100)];
}

println(ret(2, 4)());
println(ret(2, 8)());
println(fact(5));

println(0..2000);

const r = 0..500;

for (k, v in { "Hello": "World!", 1: "One" }) {
    println(">>", k);
}

println(k);

